stages:
  - linter
  - build
  - test
  - docs
  - rebuild_database
  - deploy_test_server
  - systest
  - deploy_prod_server


test-linter-frontend:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  image: node:20
  tags:
    - chappie #Runner-namn
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  stage: linter
  script:
      - npm run lint:ci
      
test-backend:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  stage: test
  tags:
    - chappie #Runner-namn
  image: maven:3.8.3-openjdk-17
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/backend/.m2/repository"
  cache:
    paths:
      - backend/.m2/repository
  script:
    - cd backend
    - mvn -q test
  
test-frontend:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  stage: test
  tags:
    - chappie #Runner-namn
  image: node:20
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  script:
    - npm run test:ci

build-frontend:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED
  stage: build
  tags:
    - chappie #Runner-namn
  image: node:20
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  script:
    - npm run build
      
generate-api-docs:
  stage: docs
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - system
  script:
    - rm -rf /var/www/html/api-docs
    - cd docs/api-docs && mkdocs build -d /var/www/html/api-docs

generate-javadocs:
  stage: docs
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - system
  script:
    - rm -rf /var/www/html/javadocs
    - cd backend
    - mvn javadoc:aggregate
    - mkdir /var/www/html/javadocs
    - cp -r target/site/apidocs/* /var/www/html/javadocs

rebuild-database:
  stage: rebuild_database
  rules:
    - changes:
      - infra/database/init
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - system
  before_script:
    - docker login --username pvt2024 --password $DOCKER_PASS # DOCKER_PASS defined in GitLab CI/CD settings as a secure variable.
  script:
    - docker stop html-psql-1
    - docker rm html-psql-1
    - docker volume rm html-pgdata

deploy-test-server:
  stage: deploy_test_server
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - system
  before_script:
    - docker login --username pvt2024 --password $DOCKER_PASS # DOCKER_PASS defined in GitLab CI/CD settings as a secure variable.
  script:
    - docker system prune -a -f

    - rm -rf /var/www/html/*.tar
    - rm -rf /var/www/html/nginx
    - rm -rf /var/www/html/*.yml

    - docker build --no-cache -t pvt2024/database:feature ./infra/database
    - docker push pvt2024/database:feature
    - docker build --no-cache -t pvt2024/gateway:feature ./backend/gateway
    - docker push pvt2024/gateway:feature
    - docker build --no-cache -t pvt2024/api:feature ./backend/api
    - docker push pvt2024/api:feature
    - docker build --no-cache -t pvt2024/frontend:feature ./frontend
    - docker push pvt2024/frontend:feature

    - cp ./docker-compose.feature.yml /var/www/html/
    - cp -r ./nginx /var/www/html/

    - cd /var/www/html/
    - docker compose -f docker-compose.feature.yml up -d

run-systests:
  stage: systest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - system
  image: mcr.microsoft.com/playwright:v1.39.0-jammy
  script:
    - cd frontend/
    - npm ci # Install project dependencies
    - npm run systest:ci # Run your Playwright tests 
    - echo "https://$CI_PROJECT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/playwright-report/index.html" # print the URL to view the results
    - cd ../infra/systest
    - chmod u+x run-new-systests.sh
    - ./run-new-systests.sh
  allow_failure: true
  after_script:
    - >
      if [ $CI_JOB_STATUS == 'success' ]; then
        docker tag pvt2024/database:feature pvt2024/database:latest
        docker push pvt2024/database:latest
        docker tag pvt2024/api:feature pvt2024/api:latest
        docker push pvt2024/api:latest
        docker tag pvt2024/gateway:feature pvt2024/gateway:latest
        docker push pvt2024/gateway:latest
        docker tag pvt2024/frontend:feature pvt2024/frontend:latest
        docker push pvt2024/frontend:latest
      else
        docker system prune -a -f
        rm -rf /var/www/html/*.tar
        rm -rf /var/www/html/nginx
        rm -rf /var/www/html/*.yml
        docker build -t pvt2024/database:latest ./infra/database
        docker build --no-cache -t pvt2024/gateway:latest ./backend/gateway
        docker build --no-cache -t pvt2024/api:latest ./backend/api
        docker build --no-cache -t pvt2024/frontend:latest ./frontend
        cp ./docker-compose.yml /var/www/html/
        cp -r ./nginx /var/www/html/
        cd /var/www/html/
        docker compose up -d
      fi

deploy-prod-server:
  stage: deploy_prod_server
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - system
  script:
    - ssh pvt@5dv214vt24-prod.cs.umu.se 'cd /home/pvt/prod/ && ./build.sh '$CI_COMMIT_TAG' && exit'
  release: 
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    