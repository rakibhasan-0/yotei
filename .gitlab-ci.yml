default:
  image: node:19
  before_script:
    - npm install --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key: "node-modules"
    paths:
      - node-modules/
      - .npm/
  
.skippable: &skippable
  except:
    variables:
      # Possible improvement for later: /^\[(.*,\s*)*skip?(,.*)*\]/i
      # This would allow for patterns such as [abc, skip, cba] etc.
      # This tag allows for skipping the pipeline, useful for example
      # if you want to push unfinished changes or for documentation. 
      - $CI_COMMIT_MESSAGE =~ /^\[skip?\]/i

stages:
  - build
  - test
  - docker
  - systest
  - coverage
  - deploy

lint-job:
  <<: *skippable
  stage: test
  except: 
    - main
  script:
    - echo "Linting started..."
    - npm run lint:ci
    - echo "Linting finished."

test-job:
  <<: *skippable
  stage: test
  except: 
    - main
  script:
    - echo "Testing started..."
    - npm run test
    - echo "Testing finished."

coverage-job:
  stage: coverage
  allow_failure: true
  only:
    - main
  coverage: /Branches\s*:\s*(\d+.?\d+)%/
  script:
    - echo "Coverage report started..."
    - npm run test:coverage
    - echo "Coverage report finished."
  artifacts:
    reports:
       coverage_report:
          coverage_format: cobertura
          path: coverage/cobertura-coverage.xml

build-job:
  <<: *skippable
  stage: build
  image: node:19
  except: 
    - main
  script:
    - echo "Compiling the code..."
    - npm run build
    - echo "Compile complete."

build-image:
  <<: *skippable
  image: docker:20
  services:
    - docker:20-dind

  stage: docker

  variables:
    DOCKER_DRIVER: "overlay2"
    CONTAINER_REPOSITORY: "pvt2023/frontend"

  before_script:
    - apk update && apk add jq
    - docker login -u "$DOCKER_CLIENT" -p "$DOCKER_SECRET"

  script:
    - DOCKER_IMAGE_TAG=$(cat package.json | jq -r '.version')
    - echo "Building website version $DOCKER_IMAGE_TAG"
    - docker build -t $CONTAINER_REPOSITORY:$DOCKER_IMAGE_TAG .
    - docker push $CONTAINER_REPOSITORY:$DOCKER_IMAGE_TAG
    - docker tag $CONTAINER_REPOSITORY:$DOCKER_IMAGE_TAG $CONTAINER_REPOSITORY:latest
    - docker push $CONTAINER_REPOSITORY:latest
  only:
    - main

# run the system tests
systest-job:
  <<: *skippable
  stage: systest
  # We must use ubuntu, as alpine (or docker:20) uses musl instead of glibc,
  # which is a requirement for chromium.
  image: mcr.microsoft.com/playwright:v1.33.0-jammy
  # only allow one runner at a time to perform system-tests
  resource_group: system-test
  artifacts:
    when: always
    paths:
      - results.xml
      - test-results/
    reports:
      junit: results.xml
  before_script:
    - apt update
    # we ca-certificates and bash are needed to download node.js 14.x
    - apt install -y --no-install-recommends docker.io curl ncat ca-certificates
    - update-ca-certificates
    - npm install --no-progress --quiet --cache .npm --prefer-offline
    - docker pull pvt2023/api:latest
    - docker pull pvt2023/gateway:latest
    - docker pull postgres:latest
    - echo "export PSQL_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 12)" > .variables
    - echo "export API_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 12)" >> .variables
    - echo "export GATEWAY_NAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 12)" >> .variables
  script:
    - export $(cat .variables | xargs)
    - >
      FRONTEND_PORT=10368
      GATEWAY_PORT=16969
      npx playwright test
  after_script:
    - export $(cat .variables | xargs)
    - docker rm -f $PSQL_NAME $API_NAME $GATEWAY_NAME
  when: manual

deploy:
  <<: *skippable
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | tr -d '\r')
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh pvt@imp.cs.umu.se "cd /home/pvt/Desktop/infra && docker compose pull && docker compose down && docker compose up -d"
  only:
    - main


