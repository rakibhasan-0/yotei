stages:
  - test_system
  - linter
  - build
  - test
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED

test-system:
  tags:
    - system
  stage: test_system
  script:
    - echo "Hello world!"


test-linter-frontend:
  image: node:19
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  stage: linter
  script:
      - npm run lint:ci
      
test-backend:
  stage: test
  image: maven:3.8.3-openjdk-17
#  variables:
#    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
#  cache:
#    paths:
#      - .m2/repository
# :-)
  script:
    - cd backend
    - mvn -q test
  
test-frontend:
  stage: test
  image: node:20
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  script:
    - npm run test:ci

build-frontend:
  stage: build
  image: node:19
  before_script:
    - cd frontend
    - npm ci --no-progress --quiet --cache .npm --prefer-offline
  cache:
    key:
      files:
        - frontend/package-lock.json
    paths:
      - frontend/.npm/
  script:
    - npm run build
      

deploy-test-server:
  tags:
    - system
  rules:
    - if: $CI_MERGE_REQUEST_STATE == 'merged'
  before_script:
    # do this without certificate
    - sed "s/5dv214vt24-test.cs.umu.se/" nginx/prod.conf > nginx/kund.conf
    - sed -i.bak 's/development.conf/kund.conf/g' docker-compose.yml 
    - sed -i '/letsencrypt/s/# //' docker-compose.yml
    - sed -i '/USE_IMP_SERVER/s/true/false/' ../frontend/.env